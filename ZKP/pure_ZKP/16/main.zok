// D(num) to B(num)
def D2B(u64 mut num) -> bool[64] {
    // rem = num % 2
    u64 mut rem = 0;
    // quot = num / 2
    u64 mut quot = 0;
    // Binary array
    bool[64] mut res = [false; 64];
    // loop
    for u32 i in 0..64 {
        rem = num % 2;
        quot = num / 2;
        num = quot;
        res[i] = if rem == 1 {true} else {false};
    }
    return res;
}

// num mod p
def mod(u64 num, u64 p) -> u64 {
    return num % p;
}

// mult table
def mult(u64 num, u64 p) -> u64[64] {
    u64[64] mut res = [0; 64];
    res[0] = mod(num, p);
    for u32 i in 1..64 {
        res[i] = res[i - 1] * res[i - 1];
        res[i] = mod(res[i], p);
    }
    return res;
}

// fast pow
def pow(u64 num, u64 n, u64 p) -> u64 {
    assert(n >= 1);
    bool[64] binary = D2B(n);
    u64[64] table = mult(num, p);
    u64 mut res = 1;
    for u32 i in 0..64 {
        res = if binary[i] == true {res * table[i]} else {res};
        res = mod(res, p);
    }
    return res;
}

// Pedersen
def cmt(u64 g, u64 h, u64 m, u64 r, u64 p) -> u64 {
    u64 g_m = pow(g, m, p);
    u64 h_r = pow(h, r, p);
    u64 res = g_m * h_r;
    return mod(res, p);
}

// def main(u64 g, u64 h, private u64 m, private u64 r, u64 d, u64 p) -> u64 {
//     assert(m < d);
//     return cmt(g, h, m, r, p);
// }

// def main(u64 g, u64 h, private u64[2] m1, private u64[2] r1, private u64[2] m2, private u64[2] r2, u64 d, u64 p) -> u64[4] {
//     u64 mut dist = 0;
//     u64 mut temp = 0;
//     u64[4] mut res = [0; 4];
//     for u32 i in 0..2 {
//         temp = if m1[i] - m2[i] >= 0 {m1[i] - m2[i]} else {m2[i] - m1[i]};
//         dist = dist + temp * temp;
//         res[i] = cmt(g, h, m1[i], r1[i], p);
//         res[2 + i] = cmt(g, h, m2[i], r2[i], p);
//     }
//     assert(dist < d);
//     return res;
// }

// def main(u64 g, u64 h, private u64[4] m1, private u64[4] r1, private u64[4] m2, private u64[4] r2, u64 d, u64 p) -> u64[8] {
//     u64 mut dist = 0;
//     u64 mut temp = 0;
//     u64[8] mut res = [0; 8];
//     for u32 i in 0..4 {
//         temp = if m1[i] - m2[i] >= 0 {m1[i] - m2[i]} else {m2[i] - m1[i]};
//         dist = dist + temp * temp;
//         res[i] = cmt(g, h, m1[i], r1[i], p);
//         res[4 + i] = cmt(g, h, m2[i], r2[i], p);
//     }
//     assert(dist < d);
//     return res;
// }

// def main(u64 g, u64 h, private u64[8] m1, private u64[8] r1, private u64[8] m2, private u64[8] r2, u64 d, u64 p) -> u64[16] {
//     u64 mut dist = 0;
//     u64 mut temp = 0;
//     u64[16] mut res = [0; 16];
//     for u32 i in 0..8 {
//         temp = if m1[i] - m2[i] >= 0 {m1[i] - m2[i]} else {m2[i] - m1[i]};
//         dist = dist + temp * temp;
//         res[i] = cmt(g, h, m1[i], r1[i], p);
//         res[4 + i] = cmt(g, h, m2[i], r2[i], p);
//     }
//     assert(dist < d);
//     return res;
// }

def main(u64 g, u64 h, private u64[16] m1, private u64[16] r1, private u64[16] m2, private u64[16] r2, u64 d, u64 p) -> u64[32] {
    u64 mut dist = 0;
    u64 mut temp = 0;
    u64[32] mut res = [0; 32];
    for u32 i in 0..16 {
        temp = if m1[i] - m2[i] >= 0 {m1[i] - m2[i]} else {m2[i] - m1[i]};
        dist = dist + temp * temp;
        res[i] = cmt(g, h, m1[i], r1[i], p);
        res[16 + i] = cmt(g, h, m2[i], r2[i], p);
    }
    assert(dist < d);
    return res;
}
